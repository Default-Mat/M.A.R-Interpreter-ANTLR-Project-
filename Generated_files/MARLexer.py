# Generated from MAR.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,27,189,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,1,0,1,0,1,1,1,1,1,2,4,2,65,8,2,11,2,
        12,2,66,1,2,1,2,1,3,4,3,72,8,3,11,3,12,3,73,1,4,4,4,77,8,4,11,4,
        12,4,78,1,4,1,4,5,4,83,8,4,10,4,12,4,86,9,4,1,5,1,5,5,5,90,8,5,10,
        5,12,5,93,9,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,106,
        8,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,
        1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,
        3,12,136,8,12,1,13,4,13,139,8,13,11,13,12,13,140,1,13,1,13,1,13,
        5,13,146,8,13,10,13,12,13,149,9,13,1,14,1,14,1,15,1,15,1,16,1,16,
        1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,
        1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,
        1,27,1,27,1,27,3,27,186,8,27,1,28,1,28,1,91,0,29,1,0,3,0,5,1,7,2,
        9,3,11,4,13,5,15,6,17,7,19,8,21,9,23,10,25,11,27,12,29,13,31,14,
        33,15,35,16,37,17,39,18,41,19,43,20,45,21,47,22,49,23,51,24,53,25,
        55,26,57,27,1,0,4,1,0,48,57,2,0,65,90,97,122,3,0,9,10,13,13,32,32,
        2,0,60,60,62,62,201,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,
        0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,
        0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,
        0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,
        0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,
        0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,1,59,1,0,0,0,3,61,1,0,
        0,0,5,64,1,0,0,0,7,71,1,0,0,0,9,76,1,0,0,0,11,87,1,0,0,0,13,105,
        1,0,0,0,15,107,1,0,0,0,17,112,1,0,0,0,19,115,1,0,0,0,21,120,1,0,
        0,0,23,124,1,0,0,0,25,135,1,0,0,0,27,138,1,0,0,0,29,150,1,0,0,0,
        31,152,1,0,0,0,33,154,1,0,0,0,35,156,1,0,0,0,37,158,1,0,0,0,39,160,
        1,0,0,0,41,162,1,0,0,0,43,164,1,0,0,0,45,166,1,0,0,0,47,168,1,0,
        0,0,49,170,1,0,0,0,51,172,1,0,0,0,53,174,1,0,0,0,55,185,1,0,0,0,
        57,187,1,0,0,0,59,60,7,0,0,0,60,2,1,0,0,0,61,62,7,1,0,0,62,4,1,0,
        0,0,63,65,7,2,0,0,64,63,1,0,0,0,65,66,1,0,0,0,66,64,1,0,0,0,66,67,
        1,0,0,0,67,68,1,0,0,0,68,69,6,2,0,0,69,6,1,0,0,0,70,72,3,1,0,0,71,
        70,1,0,0,0,72,73,1,0,0,0,73,71,1,0,0,0,73,74,1,0,0,0,74,8,1,0,0,
        0,75,77,3,1,0,0,76,75,1,0,0,0,77,78,1,0,0,0,78,76,1,0,0,0,78,79,
        1,0,0,0,79,80,1,0,0,0,80,84,5,46,0,0,81,83,3,1,0,0,82,81,1,0,0,0,
        83,86,1,0,0,0,84,82,1,0,0,0,84,85,1,0,0,0,85,10,1,0,0,0,86,84,1,
        0,0,0,87,91,5,34,0,0,88,90,9,0,0,0,89,88,1,0,0,0,90,93,1,0,0,0,91,
        92,1,0,0,0,91,89,1,0,0,0,92,94,1,0,0,0,93,91,1,0,0,0,94,95,5,34,
        0,0,95,12,1,0,0,0,96,97,5,116,0,0,97,98,5,114,0,0,98,99,5,117,0,
        0,99,106,5,101,0,0,100,101,5,102,0,0,101,102,5,97,0,0,102,103,5,
        108,0,0,103,104,5,115,0,0,104,106,5,101,0,0,105,96,1,0,0,0,105,100,
        1,0,0,0,106,14,1,0,0,0,107,108,5,110,0,0,108,109,5,117,0,0,109,110,
        5,108,0,0,110,111,5,108,0,0,111,16,1,0,0,0,112,113,5,105,0,0,113,
        114,5,102,0,0,114,18,1,0,0,0,115,116,5,101,0,0,116,117,5,108,0,0,
        117,118,5,115,0,0,118,119,5,101,0,0,119,20,1,0,0,0,120,121,5,102,
        0,0,121,122,5,111,0,0,122,123,5,114,0,0,123,22,1,0,0,0,124,125,5,
        119,0,0,125,126,5,104,0,0,126,127,5,105,0,0,127,128,5,108,0,0,128,
        129,5,101,0,0,129,24,1,0,0,0,130,131,5,97,0,0,131,132,5,110,0,0,
        132,136,5,100,0,0,133,134,5,111,0,0,134,136,5,114,0,0,135,130,1,
        0,0,0,135,133,1,0,0,0,136,26,1,0,0,0,137,139,3,3,1,0,138,137,1,0,
        0,0,139,140,1,0,0,0,140,138,1,0,0,0,140,141,1,0,0,0,141,147,1,0,
        0,0,142,146,3,3,1,0,143,146,3,1,0,0,144,146,5,95,0,0,145,142,1,0,
        0,0,145,143,1,0,0,0,145,144,1,0,0,0,146,149,1,0,0,0,147,145,1,0,
        0,0,147,148,1,0,0,0,148,28,1,0,0,0,149,147,1,0,0,0,150,151,5,33,
        0,0,151,30,1,0,0,0,152,153,5,40,0,0,153,32,1,0,0,0,154,155,5,41,
        0,0,155,34,1,0,0,0,156,157,5,44,0,0,157,36,1,0,0,0,158,159,5,61,
        0,0,159,38,1,0,0,0,160,161,5,123,0,0,161,40,1,0,0,0,162,163,5,125,
        0,0,163,42,1,0,0,0,164,165,5,43,0,0,165,44,1,0,0,0,166,167,5,45,
        0,0,167,46,1,0,0,0,168,169,5,42,0,0,169,48,1,0,0,0,170,171,5,47,
        0,0,171,50,1,0,0,0,172,173,5,94,0,0,173,52,1,0,0,0,174,175,5,37,
        0,0,175,54,1,0,0,0,176,186,7,3,0,0,177,178,5,60,0,0,178,186,5,61,
        0,0,179,180,5,62,0,0,180,186,5,61,0,0,181,182,5,61,0,0,182,186,5,
        61,0,0,183,184,5,33,0,0,184,186,5,61,0,0,185,176,1,0,0,0,185,177,
        1,0,0,0,185,179,1,0,0,0,185,181,1,0,0,0,185,183,1,0,0,0,186,56,1,
        0,0,0,187,188,5,59,0,0,188,58,1,0,0,0,12,0,66,73,78,84,91,105,135,
        140,145,147,185,1,6,0,0
    ]

class MARLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    WS = 1
    INTEGER = 2
    FLOAT = 3
    STRING = 4
    BOOL = 5
    NULL = 6
    IF = 7
    ELSE = 8
    FOR = 9
    WHILE = 10
    BOOL_OP = 11
    ID = 12
    NOT = 13
    OPP = 14
    CLP = 15
    COMMA = 16
    EQUALL = 17
    OPCB = 18
    CLCB = 19
    ADD = 20
    SUB = 21
    MUL = 22
    DIV = 23
    POW = 24
    MOD = 25
    RELOP = 26
    SC = 27

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'null'", "'if'", "'else'", "'for'", "'while'", "'!'", "'('", 
            "')'", "','", "'='", "'{'", "'}'", "'+'", "'-'", "'*'", "'/'", 
            "'^'", "'%'", "';'" ]

    symbolicNames = [ "<INVALID>",
            "WS", "INTEGER", "FLOAT", "STRING", "BOOL", "NULL", "IF", "ELSE", 
            "FOR", "WHILE", "BOOL_OP", "ID", "NOT", "OPP", "CLP", "COMMA", 
            "EQUALL", "OPCB", "CLCB", "ADD", "SUB", "MUL", "DIV", "POW", 
            "MOD", "RELOP", "SC" ]

    ruleNames = [ "DIGIT", "LETTER", "WS", "INTEGER", "FLOAT", "STRING", 
                  "BOOL", "NULL", "IF", "ELSE", "FOR", "WHILE", "BOOL_OP", 
                  "ID", "NOT", "OPP", "CLP", "COMMA", "EQUALL", "OPCB", 
                  "CLCB", "ADD", "SUB", "MUL", "DIV", "POW", "MOD", "RELOP", 
                  "SC" ]

    grammarFileName = "MAR.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


